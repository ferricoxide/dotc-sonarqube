{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template coordinates the running of the Sonarqube S3, IAM and EC2 templates.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Child Template URLs"
          },
          "Parameters": [
            "SgTemplateUri",
            "EfsTemplate",
            "RdsTemplateUri",
            "BucketTemplate",
            "IamTemplate",
            "Ec2Template"
          ]
        },
        {
          "Label": {
            "default": "Instance Attributes"
          },
          "Parameters": [
            "Hostname",
            "Domainname",
            "AmiId",
            "InstanceType",
            "SubnetId",
            "NoPublicIp",
            "ProvisionUser",
            "KeyPairName",
            "AdminPubkeyURL",
            "NoReboot"
          ]
        },
        {
          "Label": {
            "default": "Application Info"
          },
          "Parameters": [
            "SonarUser",
            "SonarSrcUrl",
            "SonarOsPrepUrl",
            "SonarAppSetupUrl",
            "SonarInitSetupUrl",
            "SonarqubeBackupBucket"
          ]
        },
        {
          "Label": {
            "default": "DB Connection Info"
          },
          "Parameters": [
            "PgsqlVersion",
            "DbInstanceName",
            "DbInstanceType",
            "DbDataSize",
            "DbNodeName",
            "DbAdminName",
            "DbAdminPass"
          ]
        },
        {
          "Label": {
            "default": "Miscellaneous Info"
          },
          "Parameters": [
            "ServiceTld",
            "TargetVPC",
            "RolePrefix",
            "HaSubnets",
            "EpelRepo",
            "PipRpm",
            "PyStache",
            "PipIndexFips"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "AdminPubkeyURL": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL the file containing the admin users' SSH public keys.",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "BucketTemplate": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates SonarQube's S3 bucket(s).",
      "Type": "String"
    },
    "DbAdminName": {
      "AllowedPattern": "^[a-z][a-z0-9-]*[a-z0-9]",
      "Description": "Name of the SonarQube master database-user.",
      "Type": "String"
    },
    "DbAdminPass": {
      "Description": "Password of the SonarQube master database-user.",
      "Type": "String"
    },
    "DbDataSize": {
      "ConstraintDescription": "Must be between 5GB and 16384GB.",
      "Default": "5",
      "Description": "Size in GiB of the RDS table-space to create.",
      "MaxValue": "16384",
      "MinValue": "5",
      "Type": "Number"
    },
    "DbInstanceName": {
      "AllowedPattern": "^[a-z][a-z0-9-]*[a-z0-9]",
      "Description": "Instance-name of the SonarQube database.",
      "Type": "String"
    },
    "DbInstanceType": {
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.t2.large",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge",
        "db.m4.10xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge"
      ],
      "Default": "db.t2.small",
      "Description": "Amazon RDS instance type",
      "Type": "String"
    },
    "DbNodeName": {
      "Description": "NodeName of the SonarQube database.",
      "Type": "String"
    },
    "Domainname": {
      "ConstraintDescription": "An alphanumeric string to complete the domain portion of the instance's FQDN.",
      "Description": "Suffix for Sonarqube's hostname and DNS record",
      "Type": "String"
    },
    "Ec2Template": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates the EC2 instance to host the SonarQube application.",
      "Type": "String"
    },
    "EfsTemplate": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates the EFS service to host SonarQube's persistent data.",
      "Type": "String"
    },
    "EpelRepo": {
      "AllowedPattern": "^[a-z][a-z0-9-]*$",
      "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
      "Default": "epel",
      "Description": "Name of network's EPEL repo.",
      "Type": "String"
    },
    "HaSubnets": {
      "Description": "Select three subnets - each from different Availability Zones.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "Hostname": {
      "ConstraintDescription": "An alphanumeric string to complete the hostname portion of the instance's FQDN.",
      "Default": "sonarqube",
      "Description": "Node-name for Sonarqube's hostname and DNS record",
      "Type": "String"
    },
    "IamTemplate": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates SonarQube's IAM role(s).",
      "Type": "String"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge"
      ],
      "Default": "t2.large",
      "Description": "Amazon EC2 instance type",
      "Type": "String"
    },
    "KeyPairName": {
      "Description": "Public/private key pairs allowing the provisioning-user to securely connect to the instance after it launches.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "LdapAuthType": {
      "AllowedValues": [
        "simple",
        "CRAM-MD5",
        "DIGEST-MD5",
        "GSSAPI"
      ],
      "Default": "simple",
      "Description": "Authentication-type to use with directory-service.",
      "Type": "String"
    },
    "LdapBaseDnGroups": {
      "Default": "",
      "Description": "Directory-node to descend from when searching for group memberships.",
      "Type": "String"
    },
    "LdapBaseDnUsers": {
      "Default": "",
      "Description": "Directory-node to descend from when searching for usernames.",
      "Type": "String"
    },
    "LdapBindDn": {
      "Default": "",
      "Description": "Distinguished-name of the authentication proxy-user account.",
      "Type": "String"
    },
    "LdapBindPassword": {
      "Default": "",
      "Description": "Password of the authentication proxy-user account.",
      "Type": "String"
    },
    "LdapRealm": {
      "Description": "FQDN-syle realm-name for directory objects.",
      "Type": "String"
    },
    "LdapUrl": {
      "Default": "",
      "Description": "URL to connect to in order access a directory-service source.",
      "Type": "String"
    },
    "LdapUseStartTLS": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Directory-node to descend from when searching for usernames.",
      "Type": "String"
    },
    "LdapUserQuery": {
      "Default": "(&(objectClass=user)(sAMAccountName={login}))",
      "Description": "Search-expression used to find users in directory",
      "Type": "String"
    },
    "NoPublicIp": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "true",
      "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
      "Type": "String"
    },
    "NoReboot": {
      "AllowedValues": [
        "false",
        "true"
      ],
      "Default": "false",
      "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
      "Type": "String"
    },
    "PgsqlVersion": {
      "AllowedValues": [
        "9.6.3",
        "9.6.2",
        "9.6.1",
        "9.5.7",
        "9.5.6",
        "9.5.4",
        "9.5.2"
      ],
      "Default": "9.6.3",
      "Description": "The X.Y.Z version of the PostGreSQL database to deploy.",
      "Type": "String"
    },
    "PipIndexFips": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Default": "https://pypi.org/simple/",
      "Description": "URL of pip index  that is compatible with FIPS 140-2 requirements.",
      "Type": "String"
    },
    "PipRpm": {
      "Default": "python2-pip",
      "Description": "Name of preferred pip RPM.",
      "Type": "String"
    },
    "PluginS3Location": {
      "AllowedPattern": "^$|^s3://.*$",
      "Description": "S3-path containing Sonarqube plugins.",
      "Type": "String"
    },
    "ProvisionUser": {
      "AllowedPattern": "[a-z0-9]{6,12}+",
      "ConstraintDescription": "Alphanumeric string between 6 and 12 characters.",
      "Default": "sonarbuild",
      "Description": "Default login user account name.",
      "Type": "String"
    },
    "PyStache": {
      "Default": "pystache",
      "Description": "Name of preferred pystache RPM.",
      "Type": "String"
    },
    "RdsTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates SonarQube's RDS database.",
      "Type": "String"
    },
    "RolePrefix": {
      "Description": "Prefix to apply to IAM role to make things a bit prettier (optional).",
      "Type": "String"
    },
    "ServiceTld": {
      "Default": "amazonaws.com",
      "Description": "TLD of the created EFS-endpoint.",
      "Type": "String"
    },
    "SgTemplateUri": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URI for the template that creates SonarQube's security groups.",
      "Type": "String"
    },
    "SonarAppSetupUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the Sonarqube setup script.",
      "Type": "String"
    },
    "SonarInitSetupUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the Sonarqube service setup script.",
      "Type": "String"
    },
    "SonarOsPrepUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the script ready the OS for Sonarqube installation.",
      "Type": "String"
    },
    "SonarSrcUrl": {
      "AllowedPattern": "^$|^http://.*$|^https://.*$",
      "Description": "URL of the Sonarqube ZIP-bundle.",
      "Type": "String"
    },
    "SonarUser": {
      "Default": "sonarqube",
      "Description": "Userid the Sonarqube service runs under.",
      "Type": "String"
    },
    "SonarqubeBackupBucket": {
      "AllowedPattern": "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]*$|^$",
      "Description": "S3 Bucket to host Sonarqube content. (Optional parameter)",
      "Type": "String"
    },
    "SubnetId": {
      "Description": "Subnet to associate to the Instance",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "TargetVPC": {
      "AllowedPattern": "^vpc-[0-9a-f]*$",
      "Description": "ID of the VPC to deploy cluster nodes into.",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Resources": {
    "BackupBucketRes": {
      "Properties": {
        "Parameters": {
          "SonarqubeBackupBucket": { "Ref": "SonarqubeBackupBucket" }
        },
        "TemplateURL": { "Ref": "BucketTemplate" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "Ec2Res": {
      "Properties": {
        "Parameters": {
          "AdminPubkeyURL": { "Ref": "AdminPubkeyURL" },
          "AmiId": { "Ref": "AmiId" },
          "BackupBucket": {
            "Fn::GetAtt": [ "BackupBucketRes", "Outputs.SonarqubeBucketName" ]
          },
          "CfnEndpointUrl": {
            "Fn::Join": [
              ".",
              [
                "https://cloudformation",
                { "Ref": "AWS::Region" },
                { "Ref": "ServiceTld" }
              ]
            ]
          },
          "Domainname": { "Ref": "Domainname" },
          "EpelRepo": { "Ref": "EpelRepo" },
          "Hostname": { "Ref": "Hostname" },
          "InstanceProfile": {
            "Fn::GetAtt": [ "IamRes", "Outputs.InstanceRoleProfile" ]
          },
          "InstanceType": { "Ref": "InstanceType" },
          "KeyPairName": { "Ref": "KeyPairName" },
          "LdapAuthType": { "Ref": "LdapAuthType" },
          "LdapBaseDnGroups": { "Ref": "LdapBaseDnGroups" },
          "LdapBaseDnUsers": { "Ref": "LdapBaseDnUsers" },
          "LdapBindDn": { "Ref": "LdapBindDn" },
          "LdapBindPassword": { "Ref": "LdapBindPassword" },
          "LdapRealm": { "Ref": "LdapRealm" },
          "LdapUrl": { "Ref": "LdapUrl" },
          "LdapUseStartTLS": { "Ref": "LdapUseStartTLS" },
          "LdapUserQuery": { "Ref": "LdapUserQuery" },
          "NoPublicIp": { "Ref": "NoPublicIp" },
          "NoReboot": { "Ref": "NoReboot" },
          "PipIndexFips": { "Ref": "PipIndexFips" },
          "PipRpm": { "Ref": "PipRpm" },
          "PluginS3Location": { "Ref": "PluginS3Location" },
          "ProvisionUser": { "Ref": "ProvisionUser" },
          "PyStache": { "Ref": "PyStache" },
          "SecurityGroupIds": {
            "Fn::Join": [
              ",",
              [
                { "Fn::GetAtt": [ "SgRes", "Outputs.AppSg" ] },
                { "Fn::GetAtt": [ "SgRes", "Outputs.NasSg" ] },
                { "Fn::GetAtt": [ "SgRes", "Outputs.RdsSg" ] }
              ]
            ]
          },
          "SonarAppSetupUrl": { "Ref": "SonarAppSetupUrl" },
          "SonarDbHost": {
            "Fn::GetAtt": [ "RdsRes", "Outputs.RdsEndpointAddress" ]
          },
          "SonarDbInst": { "Ref": "DbInstanceName" },
          "SonarDbPass": { "Ref": "DbAdminPass" },
          "SonarDbUser": { "Ref": "DbAdminName" },
          "SonarInitSetupUrl": { "Ref": "SonarInitSetupUrl" },
          "SonarOsPrepUrl": { "Ref": "SonarOsPrepUrl" },
          "SonarSrcUrl": { "Ref": "SonarSrcUrl" },
          "SonarUser": { "Ref": "SonarUser" },
          "SubnetIds": { "Ref": "SubnetId" }
        },
        "TemplateURL": { "Ref": "Ec2Template" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "IamRes": {
      "Properties": {
        "Parameters": {
          "BackupBucketArn": { "Fn::GetAtt": [ "BackupBucketRes", "Outputs.SonarqubeBucketArn" ] },
          "RolePrefix": { "Ref": "RolePrefix" },
          "ServiceTld": { "Ref": "ServiceTld" }
        },
        "TemplateURL": { "Ref": "IamTemplate" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "RdsRes": {
      "Properties": {
        "Parameters": {
          "DbAdminName": { "Ref": "DbAdminName" },
          "DbAdminPass": { "Ref": "DbAdminPass" },
          "DbDataSize": { "Ref": "DbDataSize" },
          "DbInstanceName": { "Ref": "DbInstanceName" },
          "DbInstanceType": { "Ref": "DbInstanceType" },
          "DbIsMultiAz": "true",
          "DbNodeName": { "Ref": "DbNodeName" },
          "DbSecurityGroup": { "Fn::GetAtt": [ "SgRes", "Outputs.RdsSg" ] },
          "DbSubnets": {
            "Fn::Join": [ ",", { "Ref": "HaSubnets" } ]
          },
          "PgsqlVersion": { "Ref": "PgsqlVersion" },
          "TargetVPC": { "Ref": "TargetVPC" }
        },
        "TemplateURL": { "Ref": "RdsTemplateUri" }
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "SgRes": {
      "Properties": {
        "Parameters": {
          "TargetVPC": { "Ref": "TargetVPC" }
        },
        "TemplateURL": { "Ref": "SgTemplateUri" },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    }
  }
}
